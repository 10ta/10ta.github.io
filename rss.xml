<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>AstroMelody</title><description>An Astro Theme for Visual Storytelling</description><link>https://10ta.github.io/</link><language>zh-CN</language><item><title>Pages</title><link>https://10ta.github.io/posts/learn-the-basics-basics-astro-pages/</link><guid isPermaLink="true">https://10ta.github.io/posts/learn-the-basics-basics-astro-pages/</guid><description>An introduction to Astro pages</description><pubDate>Mon, 04 Mar 2024 00:00:00 GMT</pubDate><content:encoded>
**Pages** are files that live in the `src/pages/` subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.


Supported page files
--------------------

[Section titled Supported page files](#supported-page-files)
Astro supports the following file types in the `src/pages/` directory:


* [`.astro`](#astro-pages)
* [`.md`](#markdownmdx-pages)
* `.mdx` (with the [MDX Integration installed](/en/guides/integrations-guide/mdx/#installation))
* [`.html`](#html-pages)
* `.js`/`.ts` (as [endpoints](/en/guides/endpoints/))


File\-based routing
-------------------

[Section titled File\-based routing](#file-based-routing)
Astro leverages a routing strategy called **file\-based routing**. Each file in your `src/pages/` directory becomes an endpoint on your site based on its file path.


A single file can also generate multiple pages using [dynamic routing](/en/guides/routing/#dynamic-routes). This allows you to create pages even if your content lives outside of the special `/pages/` directory, such as in a [content collection](/en/guides/content-collections/) or a [CMS](/en/guides/cms/).




Read more about [Routing in Astro](/en/guides/routing/).

### Link between pages

[Section titled Link between pages](#link-between-pages)
Write standard HTML [`&lt;a&gt;` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) in your Astro pages to link to other pages on your site. Use a **URL path relative to your root domain** as your link, not a relative file path.


For example, to link to `https://example.com/authors/sonali/` from any other page on `example.com`:




src/pages/index.astro


```
Read more &lt;a href=&quot;/authors/sonali/&quot;&gt;about Sonali&lt;/a&gt;.
```

Astro Pages
-----------

[Section titled Astro Pages](#astro-pages)
Astro pages use the `.astro` file extension and support the same features as [Astro components](/en/basics/astro-components/).




src/pages/index.astro


```
------&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;title&gt;My Homepage&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;Welcome to my website!&lt;/h1&gt;  &lt;/body&gt;&lt;/html&gt;
```

A page must produce a full HTML document. If not explicitly included, Astro will add the necessary `&lt;!DOCTYPE html&gt;` declaration and `&lt;head&gt;` content to any `.astro` component located within `src/pages/` by default. You can opt\-out of this behavior on a per\-component basis by marking it as a [partial](#page-partials) page.


To avoid repeating the same HTML elements on every page, you can move common `&lt;head&gt;` and `&lt;body&gt;` elements into your own [layout components](/en/basics/layouts/). You can use as many or as few layout components as you’d like.




src/pages/index.astro


```
---import MySiteLayout from &apos;../layouts/MySiteLayout.astro&apos;;---&lt;MySiteLayout&gt;  &lt;p&gt;My page content, wrapped in a layout!&lt;/p&gt;&lt;/MySiteLayout&gt;
```



Read more about [layout components](/en/basics/layouts/) in Astro.

Markdown/MDX Pages
------------------

[Section titled Markdown/MDX Pages](#markdownmdx-pages)
Astro also treats any Markdown (`.md`) files inside of `src/pages/` as pages in your final website. If you have the [MDX Integration installed](/en/guides/integrations-guide/mdx/#installation), it also treats MDX (`.mdx`) files the same way.


Tip

Consider creating [content collections](/en/guides/content-collections/) instead of pages for directories of related Markdown files that share a similar structure, such as blog posts or product items.


Markdown files can use the special `layout` frontmatter property to specify a [layout component](/en/basics/layouts/) that will wrap their Markdown content in a full `&lt;html&gt;...&lt;/html&gt;` page document.




src/pages/page.md


```
---layout: &apos;../layouts/MySiteLayout.astro&apos;title: &apos;My Markdown page&apos;---# Title
This is my page, written in **Markdown.**
```



Read more about [Markdown](/en/guides/markdown-content/) in Astro.

HTML Pages
----------

[Section titled HTML Pages](#html-pages)
Files with the `.html` file extension can be placed in the `src/pages/` directory and used directly as pages on your site. Note that some key Astro features are not supported in [HTML Components](/en/basics/astro-components/#html-components).


Custom 404 Error Page
---------------------

[Section titled Custom 404 Error Page](#custom-404-error-page)
For a custom 404 error page, you can create a `404.astro` or `404.md` file in `src/pages`.


This will build to a `404.html` page. Most [deploy services](/en/guides/deploy/) will find and use it.


Custom 500 Error Page
---------------------

[Section titled Custom 500 Error Page](#custom-500-error-page)
For a custom 500 error page to show for pages that are [rendered on demand](/en/guides/server-side-rendering/#enable-on-demand-server-rendering), create the file `src/pages/500.astro`. This custom page is not available for prerendered pages and can’t be prerendered.


If an error occurs rendering this page, your host’s default 500 error page will be shown to your visitor.



**Added in:**
`astro@4.10.3`



During development, if you have a `500.astro`, the error thrown at runtime is logged in your terminal, as opposed to being shown in the error overlay.


### `error`

[Section titled error](#error)

**Added in:**
`astro@4.11.0`



`src/pages/500.astro` is a special page that is automatically passed an `error` prop for any error thrown during rendering. This allows you to use the details of an error (e.g. from a page, from middleware, etc.) to display information to your visitor.


The error prop’s data type can be anything, which may affect how you type or use the value in your code:




src/pages/500\.astro


```
---interface Props {    error: unknown}
const { error } = Astro.props---
&lt;div&gt;{error instanceof Error ? error.message : &apos;Unknown error&apos;}&lt;/div&gt;
```

To avoid leaking sensitive information when displaying content from the `error` prop, consider evaluating the error first, and returning appropriate content based on the error thrown. For example, you should avoid displaying the error’s stack as it contains information about how your code is structured on the server


Page Partials
-------------

[Section titled Page Partials](#page-partials)

**Added in:**
`astro@3.4.0`



Caution

Page partials are intended to be used in conjunction with a front\-end library, such as [htmx](https://htmx.org/) or [Unpoly](https://unpoly.com/). You can also use them if you are comfortable writing low\-level front\-end JavaScript. For this reason they are an advanced feature.

Additionally, partials should not be used if the component contains scoped styles or scripts, as these elements will be stripped from the HTML output. If you need scoped styles, it is better to use regular, non\-partial pages along with a frontend library that knows how to merge the contents into the head.


Partials are page components located within `src/pages/` that are not intended to render as full pages.


Like components located outside of this folder, these files do not automatically include the `&lt;!DOCTYPE html&gt;` declaration, nor any `&lt;head&gt;` content such as scoped styles and scripts.


However, because they are located in the special `src/pages/` directory, the generated HTML is available at a URL corresponding to its file path. This allows a rendering library (e.g. htmx, Stimulus, jQuery) to access it on the client and load sections of HTML dynamically on a page without a browser refresh or page navigation.


Partials, when combined with a rendering library, provide an alternative to [Astro islands](/en/concepts/islands/) and [`&lt;script&gt;` tags](/en/guides/client-side-scripts/) for building dynamic content in Astro.


Page files that can export a value (e.g. `.astro` , `.mdx`) can be marked as partials.


Configure a file within the `src/pages/` directory to be a partial by adding the following export:




src/pages/partial.astro


```
---export const partial = true;---
&lt;li&gt;I&apos;m a partial!&lt;/li&gt;
```

The `export const partial` must be identifiable statically. It can have the value of:


* The boolean **`true`**.
* An environment variable using import.meta.env such as `import.meta.env.USE_PARTIALS`.


### Using with a library

[Section titled Using with a library](#using-with-a-library)
Partials are used to dynamically update a section of a page using a library such as [htmx](https://htmx.org/).


The following example shows an `hx-post` attribute set to a partial’s URL. The content from the partial page will be used to update the targeted HTML element on this page.




src/pages/index.astro


```
&lt;html&gt;  &lt;head&gt;    &lt;title&gt;My page&lt;/title&gt;    &lt;script src=&quot;https://unpkg.com/htmx.org@1.9.6&quot;      integrity=&quot;sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni&quot;      crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;  &lt;/head&gt;&lt;/html&gt;&lt;section&gt;  &lt;div id=&quot;parent-div&quot;&gt;Target here&lt;/div&gt;
  &lt;button hx-post=&quot;/partials/clicked/&quot;    hx-trigger=&quot;click&quot;    hx-target=&quot;#parent-div&quot;    hx-swap=&quot;innerHTML&quot;  &gt;      Click Me!  &lt;/button&gt;&lt;/section&gt;
```

The `.astro` partial must exist at the corresponding file path, and include an export defining the page as a partial:




src/pages/partials/clicked.astro


```
---export const partial = true;---&lt;div&gt;I was clicked!&lt;/div&gt;
```

See the [htmx documentation](https://htmx.org/docs/) for more details on using htmx.


Learn</content:encoded></item><item><title>Build your first Astro Blog</title><link>https://10ta.github.io/posts/welcome-world-tutorial-0-introduction/</link><guid isPermaLink="true">https://10ta.github.io/posts/welcome-world-tutorial-0-introduction/</guid><description>Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!</description><pubDate>Sun, 03 Mar 2024 00:00:00 GMT</pubDate><content:encoded>
In this tutorial, you’ll learn Astro’s key features by building a fully\-functioning blog, from zero to full launch! 🚀 



Along the way, you’ll:


* Set up your development environment
* Create pages and blog posts for your website
* Build with Astro components
* Query and work with local files
* Add interactivity to your site
* Deploy your site to the web


Want a preview of what you’re going to build? You can view the final project on [GitHub](https://github.com/withastro/blog-tutorial-demo) or [StackBlitz](https://stackblitz.com/github/withastro/blog-tutorial-demo/tree/complete?file=src%2Fpages%2Findex.astro).


Note

If you would rather start exploring Astro with a pre\-built Astro site, you can visit &lt;https://astro.new&gt; and choose a starter template to open and edit in an online editor.




Checklist
---------

[Section titled Checklist](#checklist)
* Looks great! I’m ready to get started!





Tutorials</content:encoded></item><item><title>View Transitions</title><link>https://10ta.github.io/posts/routes-and-navigation-guides-view-transitions/</link><guid isPermaLink="true">https://10ta.github.io/posts/routes-and-navigation-guides-view-transitions/</guid><description>Enable seamless navigation between pages in Astro with view transitions.</description><pubDate>Sat, 02 Mar 2024 00:00:00 GMT</pubDate><content:encoded>
Astro supports **opt\-in, per\-page, view transitions** with just a few lines of code. View transitions update your page content without the browser’s normal, full\-page navigation refresh and provide seamless animations between pages.


Astro provides a `&lt;ViewTransitions /&gt;` routing component that can be added to a single page’s `&lt;head&gt;` to control page transitions as you navigate away to another page. It provides a lightweight client\-side router that [intercepts navigation](#client-side-navigation-process) and allows you to customize the transition between pages.


Add this component to a reusable `.astro` component, such as a common head or layout, for [animated page transitions across your entire site (SPA mode)](#full-site-view-transitions-spa-mode).


Astro’s view transitions support is powered by the new [View Transitions](https://developer.chrome.com/docs/web-platform/view-transitions/) browser API and also includes:


* A few [built\-in animation options](#built-in-animation-directives), such as `fade`, `slide`, and `none`.
* Support for both forwards and backwards navigation animations.
* The ability to fully [customize all aspects of transition animation](#customizing-animations), and build your own animations.
* The option to [prevent client\-side navigation for non\-page links](#preventing-client-side-navigation).
* [Control over fallback behavior](#fallback-control) for browsers that do not yet support the View Transition APIs.
* Automatic support for [`prefers-reduced-motion`](#prefers-reduced-motion).


Note

By default, every page will use regular, full\-page, browser navigation. You must opt in to view transitions and can use them either on a per\-page basis or site\-wide.


Adding View Transitions to a Page
---------------------------------

[Section titled Adding View Transitions to a Page](#adding-view-transitions-to-a-page)
Opt in to using view transitions on individual pages by importing and adding the `&lt;ViewTransitions /&gt;` routing component to `&lt;head&gt;` on every desired page.




src/pages/index.astro


```
---import { ViewTransitions } from &apos;astro:transitions&apos;;---&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;title&gt;My Homepage&lt;/title&gt;    &lt;ViewTransitions /&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;Welcome to my website!&lt;/h1&gt;  &lt;/body&gt;&lt;/html&gt;
```

Full site view transitions (SPA mode)
-------------------------------------

[Section titled Full site view transitions (SPA mode)](#full-site-view-transitions-spa-mode)
Import and add the `&lt;ViewTransitions /&gt;` component to your common `&lt;head&gt;` or shared layout component. Astro will create default page animations based on the similarities between the old and new page, and will also provide fallback behavior for unsupported browsers.


The example below shows adding Astro’s default page navigation animations site\-wide, including the default fallback control option for non\-supporting browsers, by importing and adding this component to a `&lt;CommonHead /&gt;` Astro component:




src/components/CommonHead.astro


```
---import { ViewTransitions } from &apos;astro:transitions&apos;;---&lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/favicon.svg&quot; /&gt;&lt;meta name=&quot;generator&quot; content={Astro.generator} /&gt;
&lt;!-- Primary Meta Tags --&gt;&lt;title&gt;{title}&lt;/title&gt;&lt;meta name=&quot;title&quot; content={title} /&gt;&lt;meta name=&quot;description&quot; content={description} /&gt;
&lt;ViewTransitions /&gt;
```

No other configuration is necessary to enable Astro’s default client\-side navigation!


Use [transition directives](#transition-directives) or [override default client\-side navigation](#preventing-client-side-navigation) on individual elements for finer control.


Transition Directives
---------------------

[Section titled Transition Directives](#transition-directives)
Astro will automatically assign corresponding elements found in both the old page and the new page a shared, unique `view-transition-name`. This pair of matching elements is inferred by both the type of element and its location in the DOM.


Use optional `transition:*` directives on page elements in your `.astro` components for finer control over the page transition behaviour during navigation.


* `transition:name`: Allows you to override Astro’s default element matching for old/new content animation and [specify a transition name](#naming-a-transition) to associate a pair of DOM elements.
* `transition:animate`: Allows you to override Astro’s default animation while replacing the old element with the new one by specifying an animation type. Use Astro’s [built\-in animation directives](#built-in-animation-directives) or [create custom transition animations](#customizing-animations).
* `transition:persist`: Allows you to override Astro’s default replacing old elements for new ones and instead [persist components and HTML elements](#maintaining-state) when navigating to another page.


### Naming a transition

[Section titled Naming a transition](#naming-a-transition)
In some cases, you may want or need to identify the corresponding view transition elements yourself. You can specify a name for a pair of elements using the `transition:name` directive.




src/pages/old\-page.astro


```
&lt;aside transition:name=&quot;hero&quot;&gt;
```



src/pages/new\-page.astro


```
&lt;aside transition:name=&quot;hero&quot;&gt;
```

Note that the provided `transition:name` value can only be used once on each page. Set this manually when Astro can’t infer a proper name itself, or for more fine control over matching elements.


### Maintaining State

[Section titled Maintaining State](#maintaining-state)

**Added in:**
`astro@2.10.0`



You can persist components and HTML elements (instead of replacing them) across page navigations using the `transition:persist` directive.


For example, the following `&lt;video&gt;` will continue to play as you navigate to another page that contains the same video element. This works for both forwards and backwards navigation.




src/components/Video.astro


```
&lt;video controls=&quot;&quot; autoplay=&quot;&quot; transition:persist&gt;  &lt;source src=&quot;https://ia804502.us.archive.org/33/items/GoldenGa1939_3/GoldenGa1939_3_512kb.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt;
```

You can also place the directive on an [Astro island](/en/concepts/islands/) (a UI framework component with a [`client:` directive](/en/reference/directives-reference/#client-directives)). If that component exists on the next page, the island from the old page **with its current state** will continue to be displayed, instead of replacing it with the island from the new page.


In the example below, the component’s internal state of the count will not be reset when navigating back and forth across pages that contain the `&lt;Counter /&gt;` component with the `transition:persist` attribute.




components/Header.astro


```
&lt;Counter client:load transition:persist initialCount={5} /&gt;
```

Known limitations

Not all state can be preserved in this way. The restart of CSS animations and the reload of iframes cannot be avoided during view transitions even when using `transition:persist`.


You can also [manually identify corresponding elements](#naming-a-transition) if the island/element is in a different component between the two pages.




src/pages/old\-page.astro


```
&lt;Video controls=&quot;&quot; autoplay=&quot;&quot; transition:name=&quot;media-player&quot; transition:persist /&gt;
```



src/pages/new\-page.astro


```
&lt;MyVideo controls=&quot;&quot; autoplay=&quot;&quot; transition:name=&quot;media-player&quot; transition:persist /&gt;
```

As a convenient shorthand, `transition:persist` can alternatively take a transition name as a value.




src/pages/index.astro


```
&lt;video controls=&quot;&quot; autoplay=&quot;&quot; transition:persist=&quot;media-player&quot;&gt;
```

#### `transition:persist-props`

[Section titled transition:persist\-props](#transitionpersist-props)

**Added in:**
`astro@4.5.0`



This allows you to control whether or not an island’s props should be persisted upon navigation.


By default, when you add `transition:persist` to an island, the state is retained upon navigation, but your component will re\-render with new props. This is useful, for example, when a component receives page\-specific props such as the current page’s `title`.


You can override this behavior by setting `transition:persist-props` in addition to `transition:persist`. Adding this directive will keep an island’s existing props (not re\-render with new values) in addition to maintaining its existing state.


### Built\-in Animation Directives

[Section titled Built\-in Animation Directives](#built-in-animation-directives)
Astro comes with a few built\-in animations to override the default `fade` transition. Add the `transition:animate` directive to individual elements to customize the behavior of specific transitions.


* `fade` (default): An opinionated crossfade animation. The old content fades out and the new content fades in.
* `initial`: Opt out of Astro’s opinionated crossfade animation and use the browser’s default styling.
* `slide`: An animation where the old content slides out to the left and new content slides in from the right. On backwards navigation, the animations are the opposite.
* `none`: Disable the browser’s default animations. Use on a page’s `&lt;html&gt;` element to disable the default fade for every element on the page.


Combine directives for full control over your page animation. Set a page default on the `&lt;html&gt;` element, and override on any individual elements as desired.


The example below produces a slide animation for the body content while disabling the browser’s default fade animation for the rest of the page:







```
---import CommonHead from &apos;../components/CommonHead.astro&apos;;---
&lt;html transition:animate=&quot;none&quot;&gt;  &lt;head&gt;    &lt;CommonHead /&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;header&gt;      ...    &lt;/header&gt;    &lt;!-- Override your page default on a single element --&gt;    &lt;main transition:animate=&quot;slide&quot;&gt;      ...    &lt;/main&gt;  &lt;/body&gt;&lt;/html&gt;
```

### Customizing Animations

[Section titled Customizing Animations](#customizing-animations)
You can customize all aspects of a transition with any CSS animation properties.


To customize a built\-in animation, first import the animation from `astro:transitions`, and then pass in customization options.


The example below customizes the duration of the built\-in `fade` animation:







```
---import { fade } from &apos;astro:transitions&apos;;---
&lt;header transition:animate={fade({ duration: &apos;0.4s&apos; })}&gt;
```

You can also define your own animations for use with `transition:animate` by defining both the forwards and backwards behavior, as well as new and old pages, according to the following types:







```
export interface TransitionAnimation {  name: string; // The name of the keyframe  delay?: number | string;  duration?: number | string;  easing?: string;  fillMode?: string;  direction?: string;}
export interface TransitionAnimationPair {  old: TransitionAnimation | TransitionAnimation[];  new: TransitionAnimation | TransitionAnimation[];}
export interface TransitionDirectionalAnimations {  forwards: TransitionAnimationPair;  backwards: TransitionAnimationPair;}
```

The following example shows all the necessary properties to define a custom `bump` animation inside a `&lt;style is:global&gt;` tag in your root layout file:




src/layouts/Layout.astro


```
---import { ViewTransitions } from &apos;astro:transitions&apos;;---
&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;ViewTransitions /&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;slot /&gt;  &lt;/body&gt;&lt;/html&gt;
&lt;style is:global&gt;  @keyframes bump {    0% {      opacity: 0;      transform: scale(1) translateX(200px);    }    50% {      opacity: 0.5;      transform: scale(1.1);    }    100% {      opacity: 1;      transform: scale(1) translateX(0);    }  }&lt;/style&gt;
```

The animation’s behavior must be defined in the frontmatter of every component using the animation:




src/pages/index.astro


```
---const anim = {  old: {    name: &apos;bump&apos;,    duration: &apos;0.5s&apos;,    easing: &apos;ease-in&apos;,    direction: &apos;reverse&apos;,  },  new: {    name: &apos;bump&apos;,    duration: &apos;0.5s&apos;,    easing: &apos;ease-in-out&apos;,  },};
const customTransition = {  forwards: anim,  backwards: anim,};---
&lt;header transition:animate={customTransition}&gt; ... &lt;/header&gt;
```

You have great flexibility when defining custom animations. To achieve your desired result, you may wish to consider unusual combinations such as using different objects for forward and backward, or providing separate keyframe animations for old and new.


Router control
--------------

[Section titled Router control](#router-control)
The `&lt;ViewTransitions /&gt;` router handles navigation by listening to:


* Clicks on `&lt;a&gt;` elements.
* Backwards and forwards navigation events.


The following options allow you to further control when navigation occurs within the router:


* `data-astro-reload`: an `&lt;a&gt;` tag attribute to [force a full\-page navigation](#preventing-client-side-navigation)
* `data-astro-history=&quot;auto | push | replace&quot;`: an `&lt;a&gt;` tag attribute to [control the browser’s history](#replace-entries-in-the-browser-history)
* `navigate(href, options)`: a method available to any client script or client component to [trigger navigation](#trigger-navigation)


### Preventing client\-side navigation

[Section titled Preventing client\-side navigation](#preventing-client-side-navigation)
There are some cases where you cannot navigate via client\-side routing since both pages involved must use the `&lt;ViewTransitions /&gt;` router to prevent a full\-page reload. You may also not want client\-side routing on every navigation change and would prefer a traditional page navigation on select routes instead.


You can opt out of client\-side routing on a per\-link basis by adding the `data-astro-reload` attribute to any `&lt;a&gt;` or `&lt;form&gt;` tag. This attribute will override any existing `&lt;ViewTransitions /&gt;` component and instead trigger a browser refresh during navigation.


The following example shows preventing client\-side routing when navigating to an article from the home page only. This still allows you to have animation on shared elements, such as a hero image, when navigating to the same page from an article listing page:




src/pages/index.astro


```
&lt;a href=&quot;/articles/emperor-penguins&quot; data-astro-reload&gt;
```



src/pages/articles.astro


```
&lt;a href=&quot;/articles/emperor-penguins&quot;&gt;
```

Links with the `data-astro-reload` attribute will be ignored by the router and a full\-page navigation will occur.


### Trigger navigation

[Section titled Trigger navigation](#trigger-navigation)
You can also trigger client\-side navigation via events not normally listened to by the `&lt;ViewTransitions /&gt;` router using `navigate`. This function from the `astro:transitions/client` module can be used in scripts, and in framework components that are hydrated with a [client directive](/en/reference/directives-reference/#client-directives).


The following example shows an Astro component that navigates a visitor to another page they select from a menu:




src/components/Form.astro


```
&lt;script&gt;  import { navigate } from &apos;astro:transitions/client&apos;;
  // Navigate to the selected option automatically.  document.querySelector(&apos;select&apos;).onchange = (event) =&gt; {    let href = event.target.value;    navigate(href);  };&lt;/script&gt;&lt;select&gt;  &lt;option value=&quot;/play&quot;&gt;Play&lt;/option&gt;  &lt;option value=&quot;/blog&quot;&gt;Blog&lt;/option&gt;  &lt;option value=&quot;/about&quot;&gt;About&lt;/option&gt;  &lt;option value=&quot;/contact&quot;&gt;Contact&lt;/option&gt;&lt;/select&gt;
```



src/pages/index.astro


```
---import Form from &quot;../components/Form.astro&quot;;import { ViewTransitions } from &quot;astro:transitions&quot;;---&lt;html&gt;  &lt;head&gt;    &lt;ViewTransitions /&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;Form /&gt;  &lt;/body&gt;&lt;/html&gt;
```

The following example implements the same using `navigate()` in a React `&lt;Form /&gt;` component:




src/components/Form.jsx


```
import { navigate } from &quot;astro:transitions/client&quot;;
export default function Form() {  return (    &lt;select onChange={(e) =&gt; navigate(e.target.value)}&gt;      &lt;option value=&quot;/play&quot;&gt;Play&lt;/option&gt;      &lt;option value=&quot;/blog&quot;&gt;Blog&lt;/option&gt;      &lt;option value=&quot;/about&quot;&gt;About&lt;/option&gt;      &lt;option value=&quot;/contact&quot;&gt;Contact&lt;/option&gt;    &lt;/select&gt;  );}
```

The `&lt;Form /&gt;` component can then be rendered on an Astro page that uses the `&lt;ViewTransitions /&gt;` router, with a client directive:




src/pages/index.astro


```
---import Form from &quot;../components/Form.jsx&quot;;import { ViewTransitions } from &quot;astro:transitions&quot;;---&lt;html&gt;  &lt;head&gt;    &lt;ViewTransitions /&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;Form client:load /&gt;  &lt;/body&gt;&lt;/html&gt;
```

The `navigate` method takes these arguments:


* `href` (required) \- The new page to navigate to.
* `options` \- An optional object with the following properties:
	+ `history`: `&apos;push&apos;` \| `&apos;replace&apos;` \| `&apos;auto&apos;`
		- `&apos;push&apos;`: the router will use `history.pushState` to create a new entry in the browser history.
		- `&apos;replace&apos;`: the router will use `history.replaceState` to update the URL without adding a new entry into navigation.
		- `&apos;auto&apos;` (default): the router will attempt `history.pushState`, but if the URL is not one that can be transitioned to, the current URL will remain with no changes to the browser history.
	+ `formData`: A FormData object for `POST` requests.


For backward and forward navigation through the browser history, you can combine `navigate()` with the built\-in `history.back()`, `history.forward()` and `history.go()` functions of the browser. If `navigate()` is called during the server\-side render of your component, it has no effect.


### Replace entries in the browser history

[Section titled Replace entries in the browser history](#replace-entries-in-the-browser-history)
Normally, each time you navigate, a new entry is written to the browser’s history. This allows navigation between pages using the browser’s `back` and `forward` buttons.


The `&lt;ViewTransitions /&gt;` router allows you to overwrite history entries by adding the `data-astro-history` attribute to any individual `&lt;a&gt;` tag.


The `data-astro-history` attribute can be set to the same three values as the [`history` option of the `navigate()` function](#trigger-navigation):


`data-astro-history`: `&apos;push&apos;` \| `&apos;replace&apos;` \| `&apos;auto&apos;`


* `&apos;push&apos;`: the router will use `history.pushState` to create a new entry in the browser history.
* `&apos;replace&apos;`: the router will use `history.replaceState` to update the URL without adding a new entry into navigation.
* `&apos;auto&apos;` (default): the router will attempt `history.pushState`, but if the URL is not one that can be transitioned to, the current URL will remain with no changes to the browser history.


The following example navigates to the `/main` page but does not add a new entry to the browsing history. Instead, it reuses the current entry in the history (`/confirmation`) and overwrites it.




src/pages/confirmation.astro


```
&lt;a href=&quot;/main&quot; data-astro-history=&quot;replace&quot;&gt;
```

This has the effect that if you go back from the `/main` page, the browser will not display the `/confirmation` page, but the page before it.


### Transitions with forms

[Section titled Transitions with forms](#transitions-with-forms)

**Added in:**
`astro@4.0.0`



The `&lt;ViewTransitions /&gt;` router will trigger in\-page transitions from `&lt;form&gt;` elements, supporting both `GET` and `POST` requests.


By default, Astro submits your form data as `multipart/form-data` when your `method` is set to `POST`. If you want to match the default behavior of web browsers, use the `enctype` attribute to submit your data encoded as `application/x-www-form-urlencoded`:




src/components/Form.astro


```
&lt;form action=&quot;/contact&quot; method=&quot;POST&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt;  &lt;!-- --&gt;&lt;/form&gt;
```

You can opt out of router transitions on any individual form using the `data-astro-reload` attribute:




src/components/Form.astro


```
&lt;form action=&quot;/contact&quot; data-astro-reload&gt;  &lt;!-- --&gt;&lt;/form&gt;
```

Fallback control
----------------

[Section titled Fallback control](#fallback-control)
The `&lt;ViewTransitions /&gt;` router works best in browsers that support View Transitions (i.e. Chromium browsers), but also includes default fallback support for other browsers. Even if the browser does not support the View Transitions API, Astro will still provide in\-browser navigation using one of the fallback options for a comparable experience.


You can override Astro’s default fallback support by adding a `fallback` property on the `&lt;ViewTransitions /&gt;` component and setting it to `swap` or `none`:


* `animate` (default, recommended) \- Astro will simulate view transitions using custom attributes before updating page content.
* `swap` \- Astro will not attempt to animate the page. Instead, the old page will be immediately replaced by the new one.
* `none` \- Astro will not do any animated page transitions at all. Instead, you will get full page navigation in non\-supporting browsers.







```
---import { ViewTransitions } from &apos;astro:transitions&apos;;---&lt;title&gt;My site&lt;/title&gt;
&lt;ViewTransitions fallback=&quot;swap&quot; /&gt;
```

Known limitations

The `initial` browser animation is not simulated by Astro. So any element using this animation will not currently be animated.


Client\-side navigation process
-------------------------------

[Section titled Client\-side navigation process](#client-side-navigation-process)
When using the `&lt;ViewTransitions /&gt;` router, the following steps occur to produce Astro’s client\-side navigation:


1. A visitor to your site triggers navigation by any of the following actions:


	* Clicking an `&lt;a&gt;` tag linking internally to another page on your site.
	* Clicking the back button.
	* Clicking the forward button.
2. The router starts fetching the next page.
3. The router adds the `data-astro-transition` attribute to the HTML element with a value of `&apos;forward&apos;` or `&apos;back&apos;` as appropriate.
4. The router calls `document.startViewTransition`. This triggers the browser’s own [view transition process](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API#the_view_transition_process). Importantly, the browser screenshots the current state of the page.
5. Inside the `startViewTransition` callback, the router performs a **swap**, which consists of the following sequence of events:


	* The contents of the `&lt;head&gt;` are swapped out, with some elements kept:
	
	
		+ Stylesheet DOM nodes are left in if they exist on the new page, to prevent FOUC.
		+ Scripts are left in if they exist on the new page.
		+ Any other head elements with `transition:persist` are left in if there is a corresponding element in the new page.
	* The `&lt;body&gt;` is completely replaced with the new page’s body.
	* Elements marked `transition:persist` are moved over to the new DOM if they exist on the new page.
	* Scroll position is restored if necessary.
	* The `astro:after-swap` event is triggered on the `document`. This is the end of the **swap** process.
6. The router waits for any new stylesheets to load before resolving the transition.
7. The router executes any new scripts added to the page.
8. The `astro:page-load` event fires. This is the end of the navigation process.


Script behavior with view transitions
-------------------------------------

[Section titled Script behavior with view transitions](#script-behavior-with-view-transitions)
When you add view transitions to an existing Astro project, some of your scripts may no longer re\-run after page navigation like they did with full\-page browser refreshes. Use the following information to ensure that your scripts execute as expected.


### Script order

[Section titled Script order](#script-order)
When navigating between pages with the `&lt;ViewTransitions /&gt;` component, scripts are run in sequential order to match browser behavior.


### Script re\-execution

[Section titled Script re\-execution](#script-re-execution)
[Bundled module scripts](/en/guides/client-side-scripts/#script-processing), which are the default scripts in Astro, are only ever executed once. After initial execution they will be ignored, even if the script exists on the new page after a transition.


Unlike bundled module scripts, [inline scripts](/en/guides/client-side-scripts/#opting-out-of-processing) have the potential to be re\-executed during a user’s visit to a site if they exist on a page that is visited multiple times. Inline scripts might also re\-execute when a visitor navigates to a page without the script, and then back to one with the script.


With view transitions, some scripts may no longer re\-run after page navigation like they do with full\-page browser refreshes. There are several [events during client\-side routing that you can listen for](#lifecycle-events), and fire events when they occur. You can wrap an existing script in an event listener to ensure it runs at the proper time in the navigation cycle.




src/scripts/menu.js


```
&lt;script&gt;document.addEventListener(&apos;astro:page-load&apos;, () =&gt; {  document.querySelector(&apos;.hamburger&apos;).addEventListener(&apos;click&apos;, () =&gt; {    document.querySelector(&apos;.nav-links&apos;).classList.toggle(&apos;expanded&apos;);  });});&lt;/script&gt;
```

#### `data-astro-rerun`

[Section titled data\-astro\-rerun](#data-astro-rerun)

**Added in:**
`astro@4.5.0`



To force inline scripts to re\-execute after every transition, add the `data-astro-rerun` property. Adding any attribute to a script also implicitly adds `is:inline`, so this is only available for scripts that are not bundled and processed by Astro.







```
&lt;script is:inline data-astro-rerun&gt;...&lt;/script&gt;
```

To ensure that a script runs every time a page is loaded during client\-side navigation, it should be executed by a [lifecycle event](#lifecycle-events). For example, event listeners for `DOMContentLoaded` can be replaced by the [`astro:page-load`](/en/guides/view-transitions/#astropage-load) lifecycle event.


If you have code that sets up a global state in an inline script, this state will need to take into account that the script might execute more than once. Check for the global state in your `&lt;script&gt;` tag, and conditionally execute your code where possible. This works because `window` is preserved.







```
&lt;script is:inline&gt;  if (!window.SomeGlobal) {    window.SomeGlobal = {} // ....  }&lt;/script&gt;
```

See the [Add View Transitions Tutorial](/en/tutorials/add-view-transitions/#update-scripts) for an example of updating existing scripts in a project.


Lifecycle events
----------------

[Section titled Lifecycle events](#lifecycle-events)
The `&lt;ViewTransition /&gt;` router fires a number of events on the `document` during navigation. These events provide hooks into the lifecycle of navigation, allowing you to do things like show indicators that a new page is loading, override default behavior, and restore state as navigation is completing.


The navigation process involves a **preparation** phase, when new content is loaded; a **DOM swap** phase, where the old page’s content is replaced by the new page’s content; and a **completion** phase where scripts are executed, loading is reported as completed and clean\-up work is carried out.


Astro’s View Transition API lifecycle events in order are:


* [`astro:before-preparation`](#astrobefore-preparation)
* [`astro:after-preparation`](#astroafter-preparation)
* [`astro:before-swap`](#astrobefore-swap)
* [`astro:after-swap`](#astroafter-swap)
* [`astro:page-load`](#astropage-load)


Tip

`before-` events allow you to influence and modify actions that are about to take place, and `after-` events are notifications that a phase is complete.


While some actions can be triggered during any event, some tasks can only be performed during a specific event for best results, such as displaying a loading spinner before preparation or overriding animation pairs before swapping content.


### `astro:before-preparation`

[Section titled astro:before\-preparation](#astrobefore-preparation)

**Added in:**
`astro@3.6.0`



An event that fires at the beginning of the preparation phase, after navigation has started (e.g. after the user has clicked a link), but before content is loaded.


This event is used:


* To do something before loading has started, such as showing a loading spinner.
* To alter loading, such as loading content you’ve defined in a template rather than from the external URL.
* To change the `direction` of the navigation (which is usually either `forward` or `backward`) for custom animation.


Here is an example of using the `astro:before-preparation` event to load a spinner before the content is loaded and stop it immediately after loading. Note that using the loader callback in this way allows asynchronous execution of code.







```
&lt;script is:inline&gt;  document.addEventListener(&apos;astro:before-preparation&apos;, event =&gt; {    const originalLoader = event.loader;    event.loader = async function() {      const { startSpinner } = await import(&apos;./spinner.js&apos;);      const stop = startSpinner();      await originalLoader();      stop();    };  });&lt;/script&gt;
```

### `astro:after-preparation`

[Section titled astro:after\-preparation](#astroafter-preparation)

**Added in:**
`astro@3.6.0`



An event that fires at the end of the preparation phase, after the new page’s content has been loaded and parsed into a document. This event occurs before the view transitions phase.


This example uses the `astro:before-preparation` event to start a loading indicator and the `astro:after-preparation` event to stop it:







```
&lt;script is:inline&gt;  document.addEventListener(&apos;astro:before-preparation&apos;, () =&gt; {    document.querySelector(&apos;#loading&apos;).classList.add(&apos;show&apos;);  });  document.addEventListener(&apos;astro:after-preparation&apos;, () =&gt; {    document.querySelector(&apos;#loading&apos;).classList.remove(&apos;show&apos;);  });&lt;/script&gt;
```

This is a simpler version of loading a spinner than the example shown above: if all of the listener’s code can be executed synchronously, there is no need to hook into the loader’s callback.


### `astro:before-swap`

[Section titled astro:before\-swap](#astrobefore-swap)

**Added in:**
`astro@3.6.0`



An event that fires before the new document (which is populated during the preparation phase) replaces the current document. This event occurs inside of the view transition, where the user is still seeing a snapshot of the old page.


This event can be used to make changes before the swap occurs. The `newDocument` property on the event represents the incoming document. Here is an example of ensuring the browser’s light or dark mode preference in `localStorage` is carried over to the new page:







```
&lt;script is:inline&gt;  function setDarkMode(document) {    let theme = localStorage.darkMode ? &apos;dark&apos; : &apos;light&apos;;    document.documentElement.dataset.theme = theme;  }
  setDarkMode(document);
  document.addEventListener(&apos;astro:before-swap&apos;, event =&gt; {    // Pass the incoming document to set the theme on it    setDarkMode(event.newDocument);  });&lt;/script&gt;
```

The `astro:before-swap` event can also be used to change the *implementation* of the swap. The default swap implementation diffs head content, moves **persistent** elements from the old document to the `newDocument`, and then replaces the entire `body` with the body of the new document.


At this point of the lifecycle, you could choose to define your own swap implementation, for example to diff the entire contents of the existing document (which some other routers do):







```
&lt;script is:inline&gt;  document.addEventListener(&apos;astro:before-swap&apos;, event =&gt; {    event.swap = () =&gt; {      diff(document, event.newDocument);    };  });&lt;/script&gt;
```

#### Building a custom swap function

[Section titled Building a custom swap function](#building-a-custom-swap-function)

**Added in:**
`astro@4.15.0`



The `swapFunctions` object of the `astro:transitions/client` module provides five utility functions that handle specific swap\-related tasks, including handling document attributes, page elements, and script execution. These functions can be used directly to define a custom swap implementation.


The following example demonstrates how to use these functions to recreate Astro’s built\-in swap implementation:







```
&lt;script&gt;import { swapFunctions } from &apos;astro:transitions/client&apos;;
// substitutes window.document with docfunction mySwap(doc: Document) {  swapFunctions.deselectScripts(doc);  swapFunctions.swapRootAttributes(doc);  swapFunctions.swapHeadElements(doc);  const restoreFocusFunction = swapFunctions.saveFocus();  swapFunctions.swapBodyElement(doc.body, document.body);  restoreFocusFunction();};
...  event.swap = () =&gt; mySwap(event.newDocument);...&lt;script&gt;
```

Custom swap implementations can start with this template and add or replace individual steps with custom logic as needed.


### `astro:after-swap`

[Section titled astro:after\-swap](#astroafter-swap)
An event that fires immediately after the new page replaces the old page. You can listen to this event on the `document` and trigger actions that will occur before the new page’s DOM elements render and scripts run.


This event, when listened to on the **outgoing page**, is useful to pass along and restore any state on the DOM that needs to transfer over to the new page.


This is the latest point in the lifecycle where it is still safe to, for example, add a dark mode class name (`&lt;html class=&quot;dark-mode&quot;&gt;`), though you may wish to do so in an earlier event.


The `astro:after-swap` event occurs immediately after the browser history has been updated and the scroll position has been set.
Therefore, one use of targeting this event is to override the default scroll restore for history navigation. The following example resets the horizontal and vertical scroll position to the top left corner of the page for each navigation.







```
document.addEventListener(&apos;astro:after-swap&apos;,  () =&gt; window.scrollTo({ left: 0, top: 0, behavior: &apos;instant&apos; }))
```

### `astro:page-load`

[Section titled astro:page\-load](#astropage-load)
An event that fires at the end of page navigation, after the new page is visible to the user and blocking styles and scripts are loaded. You can listen to this event on the `document`.


The `&lt;ViewTransitions /&gt;` component fires this event both on initial page navigation for a pre\-rendered page and on any subsequent navigation, either forwards or backwards.


You can use this event to run code on every page navigation, for example to set up event listeners that would otherwise be lost during navigation.







```
&lt;script&gt;  document.addEventListener(&apos;astro:page-load&apos;, () =&gt; {    // This runs on first page load and after every navigation.    setupStuff(); // e.g. add event listeners  });&lt;/script&gt;
```

Accessibility
-------------

[Section titled Accessibility](#accessibility)
Enabling client\-side routing and animating page transitions both come with accessibility challenges, and Astro aims to make sites opting in to View Transitions as accessible\-by\-default as possible.


### Route announcement

[Section titled Route announcement](#route-announcement)

**Added in:**
`astro@3.2.0`



The `&lt;ViewTransitions /&gt;` component includes a route announcer for page navigation during client\-side routing. No configuration or action is needed to enable this.


Assistive technologies let visitors know that the page has changed by announcing the new page title after navigation. When using server\-side routing with traditional full\-page browser refreshes, this happens by default after the new page loads. In client\-side routing, the `&lt;ViewTransitions /&gt;` component performs this action.


To add route announcement to client\-side routing, the component adds an element to the new page with the `aria-live` attribute set to `assertive`. This tells AT (assistive technology) to announce immediately. The component also checks for the following, in priority order, to determine the announcement text:


* The `&lt;title&gt;`, if it exists.
* The first `&lt;h1&gt;` it finds.
* The `pathname` of the page.


We strongly recommend you always include a `&lt;title&gt;` in each page for accessibility.


### `prefers-reduced-motion`

[Section titled prefers\-reduced\-motion](#prefers-reduced-motion)
Astro’s `&lt;ViewTransitions /&gt;` component includes a CSS media query that disables *all* view transition animations, including fallback animation, whenever the [`prefer-reduced-motion`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion) setting is detected. Instead, the browser will simply swap the DOM elements without an animation.


Learn</content:encoded></item></channel></rss>